// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace CocheraTp.Models;

public partial class db_cocherasContext : DbContext
{
    public db_cocherasContext(DbContextOptions<db_cocherasContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ABONO> ABONOs { get; set; }

    public virtual DbSet<CLIENTE> CLIENTEs { get; set; }

    public virtual DbSet<DETALLE_FACTURA> DETALLE_FACTURAs { get; set; }

    public virtual DbSet<FACTURA> FACTURAs { get; set; }

    public virtual DbSet<FORMAS_DE_PAGO> FORMAS_DE_PAGOs { get; set; }

    public virtual DbSet<IVA_CONDICIONE> IVA_CONDICIONEs { get; set; }

    public virtual DbSet<LUGARE> LUGAREs { get; set; }

    public virtual DbSet<MARCA> MARCAs { get; set; }

    public virtual DbSet<MODELO> MODELOs { get; set; }

    public virtual DbSet<REMITO> REMITOs { get; set; }

    public virtual DbSet<ROLE> ROLEs { get; set; }

    public virtual DbSet<TIPOS_DOC> TIPOS_DOCs { get; set; }

    public virtual DbSet<TIPOS_FACTURA> TIPOS_FACTURAs { get; set; }

    public virtual DbSet<TIPOS_VEHICULO> TIPOS_VEHICULOs { get; set; }

    public virtual DbSet<USUARIO> USUARIOs { get; set; }

    public virtual DbSet<VEHICULO> VEHICULOs { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ABONO>(entity =>
        {
            entity.HasKey(e => e.id_abono).HasName("pk_abono");

            entity.ToTable("ABONOS");

            entity.Property(e => e.descripcion)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.precio).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<CLIENTE>(entity =>
        {
            entity.HasKey(e => e.id_cliente).HasName("pk_cliente");

            entity.ToTable("CLIENTES");

            entity.Property(e => e.apellido)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.direccion)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.nombre)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.nro_documento)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.telefono)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.id_iva_condicionNavigation).WithMany(p => p.CLIENTEs)
                .HasForeignKey(d => d.id_iva_condicion)
                .HasConstraintName("fk_iva_condicion");

            entity.HasOne(d => d.id_tipo_docNavigation).WithMany(p => p.CLIENTEs)
                .HasForeignKey(d => d.id_tipo_doc)
                .HasConstraintName("fk_tipo_doc");
        });

        modelBuilder.Entity<DETALLE_FACTURA>(entity =>
        {
            entity.HasKey(e => e.id_detalle_factura).HasName("pk_detalle_factura");

            entity.ToTable("DETALLE_FACTURAS");

            entity.Property(e => e.descuento).HasColumnType("decimal(4, 2)");
            entity.Property(e => e.fecha_entrada).HasColumnType("datetime");
            entity.Property(e => e.fecha_salida).HasColumnType("datetime");
            entity.Property(e => e.id_lugar)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.precio).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.recargo).HasColumnType("decimal(4, 2)");

            entity.HasOne(d => d.id_abonoNavigation).WithMany(p => p.DETALLE_FACTURAs)
                .HasForeignKey(d => d.id_abono)
                .HasConstraintName("fk_abono");

            entity.HasOne(d => d.id_facturaNavigation).WithMany(p => p.DETALLE_FACTURAs)
                .HasForeignKey(d => d.id_factura)
                .HasConstraintName("fk_facturas");

            entity.HasOne(d => d.id_lugarNavigation).WithMany(p => p.DETALLE_FACTURAs)
                .HasForeignKey(d => d.id_lugar)
                .HasConstraintName("fk_lugar");

            entity.HasOne(d => d.id_vehiculoNavigation).WithMany(p => p.DETALLE_FACTURAs)
                .HasForeignKey(d => d.id_vehiculo)
                .HasConstraintName("fk_vehiculo");
        });

        modelBuilder.Entity<FACTURA>(entity =>
        {
            entity.HasKey(e => e.id_factura).HasName("pk_factura");

            entity.ToTable("FACTURAS");

            entity.Property(e => e.fecha).HasColumnType("datetime");

            entity.HasOne(d => d.id_clienteNavigation).WithMany(p => p.FACTURAs)
                .HasForeignKey(d => d.id_cliente)
                .HasConstraintName("fk_cliente");

            entity.HasOne(d => d.id_forma_pagoNavigation).WithMany(p => p.FACTURAs)
                .HasForeignKey(d => d.id_forma_pago)
                .HasConstraintName("fk_forma_pago");

            entity.HasOne(d => d.id_tipo_facturaNavigation).WithMany(p => p.FACTURAs)
                .HasForeignKey(d => d.id_tipo_factura)
                .HasConstraintName("fk_tipo_factura");

            entity.HasOne(d => d.id_usuarioNavigation).WithMany(p => p.FACTURAs)
                .HasForeignKey(d => d.id_usuario)
                .HasConstraintName("fk_usuario");
        });

        modelBuilder.Entity<FORMAS_DE_PAGO>(entity =>
        {
            entity.HasKey(e => e.id_forma_pago).HasName("pk_forma_pago");

            entity.ToTable("FORMAS_DE_PAGO");

            entity.Property(e => e.descripcion)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IVA_CONDICIONE>(entity =>
        {
            entity.HasKey(e => e.id_iva_condicion).HasName("pk_iva_condicion");

            entity.ToTable("IVA_CONDICIONES");

            entity.Property(e => e.descripcion)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LUGARE>(entity =>
        {
            entity.HasKey(e => e.id_lugar).HasName("pk_lugar");

            entity.ToTable("LUGARES");

            entity.Property(e => e.id_lugar)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MARCA>(entity =>
        {
            entity.HasKey(e => e.id_marca).HasName("pk_marcas");

            entity.ToTable("MARCAS");

            entity.Property(e => e.nombre_marca)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MODELO>(entity =>
        {
            entity.HasKey(e => e.id_modelo).HasName("pk_modelo");

            entity.ToTable("MODELOS");

            entity.Property(e => e.descripcion)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.id_marcaNavigation).WithMany(p => p.MODELOs)
                .HasForeignKey(d => d.id_marca)
                .HasConstraintName("fk_marcas");
        });

        modelBuilder.Entity<REMITO>(entity =>
        {
            entity.HasKey(e => e.id_remito).HasName("pk_remito");

            entity.ToTable("REMITO");

            entity.Property(e => e.fecha_entrada).HasColumnType("datetime");
            entity.Property(e => e.id_lugar)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.id_lugarNavigation).WithMany(p => p.REMITOs)
                .HasForeignKey(d => d.id_lugar)
                .HasConstraintName("fk_lugar_remito");

            entity.HasOne(d => d.id_vehiculoNavigation).WithMany(p => p.REMITOs)
                .HasForeignKey(d => d.id_vehiculo)
                .HasConstraintName("fk_vehiculo_remito");
        });

        modelBuilder.Entity<ROLE>(entity =>
        {
            entity.HasKey(e => e.id_roles).HasName("pk_roles");

            entity.ToTable("ROLES");

            entity.Property(e => e.descripcion)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TIPOS_DOC>(entity =>
        {
            entity.HasKey(e => e.id_tipo_doc).HasName("pk_tipo_doc");

            entity.ToTable("TIPOS_DOC");

            entity.Property(e => e.descripcion)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TIPOS_FACTURA>(entity =>
        {
            entity.HasKey(e => e.id_tipo_factura).HasName("pk_tipo_factura");

            entity.ToTable("TIPOS_FACTURAS");

            entity.Property(e => e.descripcion)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TIPOS_VEHICULO>(entity =>
        {
            entity.HasKey(e => e.id_tipo_vehiculo).HasName("pk_tipo_vehiculo");

            entity.ToTable("TIPOS_VEHICULOS");

            entity.Property(e => e.descripcion)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.precio).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<USUARIO>(entity =>
        {
            entity.HasKey(e => e.id_usuario).HasName("pk_usuario");

            entity.ToTable("USUARIOS");

            entity.Property(e => e.contrasenia)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.usuario1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuario");

            entity.HasOne(d => d.id_rolNavigation).WithMany(p => p.USUARIOs)
                .HasForeignKey(d => d.id_rol)
                .HasConstraintName("fk_roles");
        });

        modelBuilder.Entity<VEHICULO>(entity =>
        {
            entity.HasKey(e => e.id_vehiculo).HasName("pk_vehiculo");

            entity.ToTable("VEHICULOS");

            entity.Property(e => e.color)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.patente)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.id_modeloNavigation).WithMany(p => p.VEHICULOs)
                .HasForeignKey(d => d.id_modelo)
                .HasConstraintName("fk_modelo");

            entity.HasOne(d => d.id_tipo_vehiculoNavigation).WithMany(p => p.VEHICULOs)
                .HasForeignKey(d => d.id_tipo_vehiculo)
                .HasConstraintName("fk_tipo_vehiculos");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}